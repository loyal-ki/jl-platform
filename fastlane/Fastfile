fastlane_version '2.71.0'
fastlane_require 'aws-sdk-s3'
fastlane_require 'json'
fastlane_require 'pathname'

skip_docs

lane :build_icon do
  appicon(
    appicon_image_file: 'assets/release/ios/app_icon.png',
    appicon_devices: %i[iphone ios_marketing],
    appicon_path: 'ios/Images.xcassets'
  )

  android_appicon(
    appicon_image_file: 'assets/release/android/app_icon.png',
    appicon_icon_types: [:launcher],
    appicon_path: 'android/app/src/main/res/mipmap',
    generate_rounded: true
  )
end

desc 'Increment version number for app'
lane :update_app_version do

  # TODO (Test version number)
  version_number = "0.0.1"

  # Increment version for package.json 
  package = load_config_json('../package.json')
  package['version'] = version_number
  save_json_as_file('../package.json', package)

  # Increment android version
  android_set_version_name(
    gradle_file: 'android/app/build.gradle',
    version_name: version_number
  )

  # Increment ios version
  increment_version_number(
    xcodeproj: 'ios/journey_lingua_platform.xcodeproj',
    version_number: version_number
  )
end

desc 'Increment build number for app'
lane :update_build_number do
  build_number = "1"
  increment_build_number(
    xcodeproj: 'ios/journey_lingua_platform.xcodeproj',
    build_number: build_number
  )

  android_set_version_code(
    gradle_file: 'android/app/build.gradle',
    version_code: build_number
  )
end

desc 'Upload file to s3'
lane :upload_file_to_s3 do |options|
  os_type = options[:os_type].downcase
  extensions = os_type == "android" ? ["*.apk", "*.aab"] : ["*.ipa"]
  build_folder_path = Dir[File.expand_path('..')].first
  files = []

  unless options[:file].nil? || options[:file].empty?
    files.push("#{build_folder_path}/#{options[:file]}")
  else
    extensions.each do |extension|
      files.push(*Dir.glob("#{build_folder_path}/#{extension}").select { |f| File.file? f})
    end
  end

  unless ENV['AWS_BUCKET_NAME'].nil? || ENV['AWS_BUCKET_NAME'].empty? || ENV['AWS_REGION'].nil? || ENV['AWS_REGION'].empty? || files.length == 0
    version_number = ''
    build_number = ''

    version_number = os_type == "android" ?
      android_get_version_name(gradle_file: './android/app/build.gradle') :
      get_version_number(xcodeproj: './ios/journey_lingua_platform.xcodeproj', target: 'journey_lingua_platform')
    
    build_number = os_type == "android" ?
      android_get_version_code(gradle_file: './android/app/build.gradle') :
      get_build_number(xcodeproj: './ios/journey_lingua_platform.xcodeproj')

    s3_region = ENV['AWS_REGION']
    s3_bucket_name = ENV['AWS_BUCKET_NAME']
    s3_folder = "#{ENV['AWS_FOLDER_NAME']}/#{version_number}/#{build_number}"

    s3 = Aws::S3::Resource.new(region: s3_region)
    s3_bucket = s3.bucket(s3_bucket_name)
    mutex = Mutex.new
    threads = []
    file_number = 0
    total_files = files.length
    links = []
    total_files.times do |i|
      threads[i] = Thread.new {
        until files.empty?
          mutex.synchronize do
            file_number += 1
            Thread.current["file_number"] = file_number
          end
          file = files.pop rescue nil
          next unless file

          filename = File.basename(file)
          puts "[#{Thread.current["file_number"]}/#{total_files}] #{filename} uploading..."
          s3_file = s3_bucket.object("#{s3_folder}/#{filename}")
          s3_file.upload_file("#{file}")
          links.push("https://#{s3_bucket_name}/#{s3_folder}/#{filename}")
        end
      }
    end
    threads.each { |t| t.join }
    if os_type == 'android'
      install_url = "https://#{s3_bucket_name}/#{s3_folder}/#{pr_file}"
    elsif os_type == 'ios'
      current_build_number = get_build_number(xcodeproj: './ios/journey_lingua_platform.xcodeproj')
      plist_template = File.read('plist.erb')
      plist_body = ERB.new(plist_template).result(binding)

      plist_obj = s3_bucket.object("#{s3_folder}/#{plist_file}")
      plist_obj.put(body: plist_body)

      install_url = "itms-services://?action=download-manifest&url=https://#{s3_bucket_name}/#{s3_folder}/#{plist_file}"
    end

    UI.message("S3 public paths:\n#{links.join("\n")}")
  end
end

platform :ios do
  desc 'Build iOS app'
  lane :build do
    update_identifiers
    # build_ios
  end

  lane :unsigned do
    UI.success('Building unsigned iOS app')

    ENV['APP_NAME'] = 'JourneyLingua'
    ENV['REPLACE_ASSETS'] = 'true'
    ENV['BUILD_FOR_RELEASE'] = 'true'
    ENV['APP_SCHEME'] = 'JourneyLingua'

    update_identifiers

    build_ios_unsigned_or_simulator(
      more_xc_args: "-sdk iphoneos CODE_SIGNING_ALLOWED=NO",
      rel_build_dir: "Release-iphoneos",
      output_file: "JourneyLingua-unsigned.ipa",
    )
  end

  lane :update_identifiers do
    # Set the name for the app ios
    app_name =  'JourneyLingua'
    update_info_plist(
      xcodeproj: 'ios/journey_lingua_platform.xcodeproj',
      plist_path: 'journey_lingua_platform/Info.plist',
      display_name: app_name
    )

    # Set the app bundle id
    app_bundle_id = ENV['MAIN_APP_IDENTIFIER'] || 'com.journey_lingua_platform.rnbeta'
    update_app_identifier(
        xcodeproj: './ios/journey_lingua_platform.xcodeproj',
        plist_path: 'journey_lingua_platform/Info.plist',
        app_identifier: app_bundle_id
    )

    # find_replace_string(
    #   path_to_file: './ios/journey_lingua_platform.xcodeproj/project.pbxproj',
    #   old_string: 'com.journey_lingua_platform',
    #   new_string: app_bundle_id
    # )
  end

  def build_ios_unsigned_or_simulator(more_xc_args:, rel_build_dir:, output_file:)
    root_dir = Dir[File.expand_path('..')].first
    ios_build_dir = "#{root_dir}/ios/Build/Products"

    ENV['APP_NAME'] = 'JourneyLingua'
    ENV['REPLACE_ASSETS'] = 'true'
    ENV['BUILD_FOR_RELEASE'] = 'true'
    ENV['APP_SCHEME'] = 'JourneyLingua'

    update_identifiers

    sh "rm -rf #{ios_build_dir}/"
    sh "cd #{root_dir}/ios && xcodebuild -workspace journey_lingua_platform.xcworkspace -scheme journey_lingua_platform -configuration Release -parallelizeTargets CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO SYMROOT='#{ios_build_dir}' #{more_xc_args} "
    sh "cd #{ios_build_dir}/#{rel_build_dir} && zip -r #{output_file} journey_lingua_platform.app"
    sh "mv #{ios_build_dir}/#{rel_build_dir}/#{output_file} #{root_dir}"
  end
end

platform :android do
  desc 'Build an unsigned apk'
  lane :unsigned do
    UI.success('Building unsigned Android app')

    root_dir = Dir[File.expand_path('..')].first

    android_releases_file_path = "#{root_dir}/android/app/JourneyLingua.keystore"

    ENV['APP_NAME'] = 'JourneyLingua'
    ENV['REPLACE_ASSETS'] = 'true'
    ENV['BUILD_FOR_RELEASE'] = 'true'
    ENV['APP_SCHEME'] = 'JourneyLingua'

    gradle(
      task: 'assemble',
      build_type: 'Unsigned',
      project_dir: 'android/',
      properties: {
        "android.injected.signing.store.file" => android_releases_file_path,
        "android.injected.signing.store.password" => ENV["SIGNING_PASSWORD"],
        "android.injected.signing.key.alias" => "journeylingua",
        "android.injected.signing.key.password" => ENV["SIGNING_PASSWORD"],
      }
    )

    sh "mv #{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]} #{Pathname.new(File.expand_path(File.dirname(__FILE__))).parent.to_s}/JourneyLingua-unsigned.apk"

  lane :update_identifiers do
    app_name =  ENV['APP_NAME'] || 'JourneyLingua'

    android_change_string_app_name(
      newName: app_name,
      stringsFile: './android/app/src/main/res/values/strings.xml'
    )

    package_id = ENV['MAIN_APP_IDENTIFIER'] || 'com.journey_lingua_platform.rnbeta'
    android_change_package_identifier(newIdentifier: package_id, manifest: './android/app/src/main/AndroidManifest.xml')
    android_update_application_id(app_folder_name: 'android/app', application_id: package_id)
    android_update_namespace(app_folder_name: 'android/app', namespace: package_id)

    app_scheme = ENV['APP_SCHEME'] || 'JourneyLingua'

    find_replace_string(
      path_to_file: "./android/app/src/main/AndroidManifest.xml",
      old_string: 'scheme="JourneyLingua"',
      new_string: "scheme=\'#{app_scheme}\'"
    )
    end
  end
end

desc 'Create GitHub release'
lane :github do
  tag = ENV['GITHUB_REF_NAME'] || ENV['TAG']

  if tag
    version = android_get_version_name(gradle_file: './android/app/build.gradle')
    build = android_get_version_code(gradle_file: './android/app/build.gradle')
    changelog = File.read("metadata/changelog")
    android = [
      "    * [JourneyLingua arm64-v8a](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua-arm64-v8a.apk)",
      "    * [JourneyLingua armeabi-v7a](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua-armeabi-v7a.apk)",
      "    * [JourneyLingua Universal](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua-universal.apk)",
      "    * [JourneyLingua x86](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua-x86.apk)",
      "    * [JourneyLingua x86_64](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua-x86_64.apk)",
    ]
    changelog.concat("* Android\n#{android.join("\n")}\n")
    changelog.concat("* iOS\n    * [JourneyLingua](https://releases.journeylingua.com/journey-lingua-platform/#{version}/#{build}/JourneyLingua.ipa)")

    github_release = set_github_release(
      repository_name: "loyal-ki/jl-platform",
      api_token: ENV["GITHUB_TOKEN"],
      name: "Mobile Version #{version}",
      tag_name: tag,
      description: changelog,
      upload_assets: ["./JourneyLingua-unsigned.apk", "JourneyLingua-unsigned.ipa"],
      is_draft: true
    )
  end
end


def load_config_json(json_path)
  config_file = File.read(json_path)
  JSON.parse(config_file)
end

def save_json_as_file(json_path, json)
  File.open(json_path, 'w') do |f|
    f.write(JSON.pretty_generate(json))
    f.write("\n")
  end
end
